#BFS(Breadth First Search)
from collections import defaultdict, deque

def bfs(graph, start):
    visited = set()
    queue = deque([start])
    visited.add(start)

    while queue:
        vertex = queue.popleft()
        print(vertex, end=" ")

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

# Taking input from user 
def create_graph():
    graph = defaultdict(list)
    vertices = int(input("Enter the number of vertices: "))

    for _ in range(vertices):
        vertex = input("Enter vertex: ")
        neighbors = input(f"Enter neighbors of vertex {vertex} separated by space: ").split()
        graph[vertex].extend(neighbors)

    return graph



if _name_ == "_main_":
    graph = create_graph()
    start_vertex = input("Enter the start vertex for BFS: ")
    print("BFS Traversal:")
    bfs(graph, start_vertex)
