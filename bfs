#BFS(Breadth First Search)
from collections import defaultdict, deque

class Graph:
    def _init_(self):
        self.graph = defaultdict(list)

    def add_edge(self, u, v):
        self.graph[u].append(v)

    def bfs(self, start):
        visited = set()
        queue = deque([start])
        visited.add(start)

        while queue:
            node = queue.popleft()
            print(node, end=' ')

            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    visited.add(neighbor)
                    queue.append(neighbor)

if _name_ == "_main_":
    graph = Graph()

    num_edges = int(input("Enter the number of edges: "))

    for _ in range(num_edges):
        u, v = map(int, input("Enter edge (u, v): ").split())
        graph.add_edge(u, v)

    start_node = int(input("Enter the starting node for BFS: "))

    print("BFS Traversal:")
    graph.bfs(start_node)

