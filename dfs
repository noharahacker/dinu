#DFS(DEPTH FIRST SEARCH)
class Graph:
    def _init_(self):
        self.graph = {}

    def add_edge(self, u, v):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append(v)

    def dfs_util(self, node, visited):
        visited.add(node)
        print(node, end=' ')

        if node in self.graph:
            for neighbor in self.graph[node]:
                if neighbor not in visited:
                    self.dfs_util(neighbor, visited)

    def dfs(self, start):
        visited = set()
        self.dfs_util(start, visited)

if _name_ == "_main_":
    graph = Graph()

    num_edges = int(input("Enter the number of edges: "))

    for _ in range(num_edges):
        u, v = map(int, input("Enter edge (u, v): ").split())
        graph.add_edge(u, v)

    start_node = int(input("Enter the starting node for DFS: "))

    print("DFS Traversal:")
    graph.dfs(start_node)
