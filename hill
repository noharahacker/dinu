import random

def objective_function(x):
    """ Define the objective function here.
        This example uses a simple quadratic function. """
    return -(x ** 2)  # Minimize -x^2 (negative to maximize x^2)

def hill_climbing(max_iter):
    """ Hill climbing algorithm to find the maximum of a function. """
    # Initialize with a random solution
    current_solution = random.uniform(-10, 10)
    current_value = objective_function(current_solution)
    
    # Perform hill climbing iterations
    for i in range(max_iter):
        # Generate a random neighbor solution
        neighbor_solution = current_solution + random.uniform(-0.5, 0.5)
        neighbor_value = objective_function(neighbor_solution)
        
        # Move to the neighbor if it's better
        if neighbor_value > current_value:
            current_solution = neighbor_solution
            current_value = neighbor_value
            
        # Print current iteration's results
        print(f'Iteration {i+1}: Best solution = {current_solution:.4f}, Best value = {current_value:.4f}')
        
    return current_solution, current_value

if __name__ == "__main__":
    # Get user input for the number of iterations
    max_iterations = int(input("Enter the number of iterations: "))
    
    # Perform hill climbing with the specified iterations
    best_solution, best_value = hill_climbing(max_iterations)
    
    # Print the final results
    print("\nHill Climbing Optimization Result:")
    print(f"Best solution found: {best_solution:.4f}")
    print(f"Objective value at this point: {best_value:.4f}")
