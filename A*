def aStarAlgo(start_node, stop_node):
graph_nodes = {
'A': [('B', 2), ('E', 3)],
'B': [('C', 1), ('G', 9)],
'C': None,
'E': [('D', 6)],
'D': [('G', 1)],
'G':None
}
heuristic_dist = {
'A': 11,
'B': 6,
'C': 99,
'D': 1,
'E': 7,
'G': 0,
}
open_set = set([start_node])
closed_set = set()
g = {start_node: 0}
parents = {start_node: start_node}
while open_set:
n = min(open_set, key=lambda x: g[x] + heuristic_dist.get(x, float('inf')))
if n == stop_node or graph_nodes[n] is None:
break
for m, weight in get_neighbors(n, graph_nodes):
if m not in open_set and m not in closed_set:
open_set.add(m)
parents[m] = n
g[m] = g[n] + weightelse:
if g[m] > g[n] + weight:
g[m] = g[n] + weight
parents[m] = n
if m in closed_set:
closed_set.remove(m)
open_set.add(m)
open_set.remove(n)
closed_set.add(n)
if stop_node not in parents:
print('Path does not exist!')
return None
path = []
current_node = stop_node
while current_node != start_node:
if v in graph_nodes:
return graph_nodes[v]
else:
return []
start_node_input = input("Enter start node: ").upper()
stop_node_input = input("Enter stop node: ").upper()
path.append(current_node)
current_node = parents[current_node]
path.append(start_node)
path.reverse()
print('Path found:', path)
return path
def get_neighbors(v, graph_nodes):
